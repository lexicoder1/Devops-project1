pipeline {
    
    environment {
        REGISTRY = 'lexikhoder'   // Docker registry (e.g., Docker Hub or private registry)
        IMAGE_NAME = 'frontend'     // Name of your Docker image
        } 
        
    agent { 
        docker {
            image 'lexikhoder/node-agent:1'
            args '-u root -v /var/run/docker.sock:/var/run/docker.sock'
        }
    }

    stages {
        stage('Checkout') {
            steps {
                // Clone your GitHub repository
                git 'https://github.com/lexicoder1/Devops-project1.git'
            }
        }
        

        stage('Testing') {
            steps {
                dir('App/front-end') {
                // testing code
                sh "echo testing "
                }
            }
        }
        
        
        stage('Build Docker Image') {
            steps {
                  
                   
                    sh '''
                    cd Deployment/Deployment/
                    PREV_TAG_NUMBER=$(cat previous-tag-frontend.txt)
                    NEW_TAG_NUMBER=$((PREV_TAG_NUMBER + 1)) 
                    cd ../../App/front-end 
                    ls -la
                    docker build -t ${REGISTRY}/${IMAGE_NAME}:${NEW_TAG_NUMBER} .
                    '''
                    
                
            }
        }
       
        stage('Docker Login') {
            steps {
                script{
                    // Log in to Docker
                withDockerRegistry(credentialsId: 'docker-pass') {
                    sh '''
                    cd Deployment/Deployment/
                    PREV_TAG_NUMBER=$(cat previous-tag-frontend.txt)
                    NEW_TAG_NUMBER=$((PREV_TAG_NUMBER + 1))
                    cd ../../App/front-end  
                    docker push ${REGISTRY}/${IMAGE_NAME}:${NEW_TAG_NUMBER}
                    '''
                }
                }
                    
                    
                
            }
        }
        
        stage('Update Deployment File') {
            environment {
                GIT_REPO_NAME = "Devops-project1"
                GIT_USER_NAME = "lexicoder1"
                

            }
            steps {
                withCredentials([string(credentialsId: 'git-token', variable: 'GITHUB_TOKEN')]) {
                    sh '''
                        cd Deployment/Deployment/
                        PREV_TAG_NUMBER=$(cat previous-tag-frontend.txt)
                        NEW_TAG_NUMBER=$((PREV_TAG_NUMBER + 1))
                        git config --global user.email "uzorifeanyi1000@gmail.com"
                        git config --global user.name "uzor ifeanyi"
                        git config --global --add safe.directory $WORKSPACE
                        cat values.yaml
                        sed -i "s/lexikhoder\\/${IMAGE_NAME}:${PREV_TAG_NUMBER}/lexikhoder\\/${IMAGE_NAME}:${NEW_TAG_NUMBER}/g" values.yaml
                        sed -i "s/${PREV_TAG_NUMBER}/${NEW_TAG_NUMBER}/g" previous-tag-frontend.txt
                        cd ..
                        git pull origin master
                        git branch --set-upstream-to=origin/master master
                        git add .
                        git commit -m "updated ${NEW_TAG_NUMBER}" 
                        git push https://${GIT_USER_NAME}:${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git

                    '''
                }   
            }
        }
    }
    
    // post {
        
    //     always {
    //         script {
                
    //             sh '''
    //             cd Deployment/Deployment/
    //             PREV_TAG_NUMBER=$(cat previous-tag-frontend.txt)
    //             NEW_TAG_NUMBER=$((PREV_TAG_NUMBER + 1))
    //             // Delete the Docker image after the build
    //             // docker rmi -f lexikhoder/node-agent:1 || true
    //             // docker rmi ${REGISTRY}/${IMAGE_NAME}:${NEW_TAG_NUMBER} || true 
    //             // Optionally clean up dangling images
    //             // docker image prune -f || true
    //             // docker system prune -f || true 
    //             '''
    //         }
    //     }
    // }
   
}